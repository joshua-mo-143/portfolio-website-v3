/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import {useFrame} from '@react-three/fiber'

export function Model(props) {
  const { nodes, materials } = useGLTF('/modelMe.glb')
  const group = useRef();
  const mesh1 = useRef();
  const mesh2 = useRef();
  const mesh3 = useRef();

  const [active, setActive] = useState(false);

  useFrame(({clock}) => {
    group.current.rotation.y = clock.getElapsedTime() / 10
    mesh1.current.rotation.y = clock.getElapsedTime()
    mesh2.current.rotation.x = clock.getElapsedTime() * -1
    mesh3.current.rotation.x = clock.getElapsedTime()
  }, [])

  return (
    <group {...props} dispose={null} ref={group} onClick={() => setActive(!active)}>
      <group position={[0.13, 1.25, -0.58]}>
        <primitive object={nodes.Torso} />
        <primitive object={nodes.neutral_bone} />
        <skinnedMesh geometry={nodes.Untitled.geometry} material={materials.palette} skeleton={nodes.Untitled.skeleton} />
      </group>
      <mesh geometry={nodes.Cube.geometry} material={materials.Material} />
      <mesh geometry={nodes.Cube001.geometry} material={materials['Material.001']} />
      <mesh ref={mesh1} geometry={nodes.Torus001.geometry} material={materials['Material.003']} position={[0.05, 1.72, 1.26]} scale={[1, 1, 0.76]} />
      <mesh ref={mesh2} geometry={nodes.Torus002.geometry} material={materials['Material.003']} position={[0.05, 1.72, 1.26]} rotation={[0, 0, -0.99]} scale={[1, 1, 0.76]} />
      <mesh ref={mesh3} geometry={nodes.Torus003.geometry} material={materials['Material.003']} position={[0.05, 1.72, 1.26]} rotation={[0, 0, 1.08]} scale={[1, 1, 0.76]} />
      <mesh geometry={nodes.Icosphere.geometry} material={materials['Material.003']} position={[0, 1.74, 1.15]} scale={0.22} />
    </group>
  )
}

useGLTF.preload('/modelMe.glb')
